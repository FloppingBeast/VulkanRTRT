/*********************************************************************
 * file:   denoise.comp
 * author: lawrence.winters (lawrence.winters@digipen.edu)
 * date:   July 2, 2024
 * Copyright ? 2024 DigiPen (USA) Corporation.
 *
 * brief: Denoising Shader
 *********************************************************************/

#version 460
#extension GL_EXT_shader_explicit_arithmetic_types_int64  : require
#extension GL_GOOGLE_include_directive : enable

#include "shared_structs.h"

const int GROUP_SIZE = 128;
layout(local_size_x = GROUP_SIZE, local_size_y = 1, local_size_z = 1) in;
layout(set = 0, binding = 0, rgba32f) uniform image2D inImage;
layout(set = 0, binding = 1, rgba32f) uniform image2D outImage;
layout(set = 0, binding = 2, rgba32f) uniform image2D kdBuff;
layout(set = 0, binding = 3, rgba32f) uniform image2D ndBuff;

layout(push_constant) uniform _pcDenoise { PushConstantDenoise pc; };
float gaussian[5] = float[5](1.0/16.0, 4.0/16.0, 6.0/16.0, 4.0/16.0, 1.0/16.0);

void main()
{
    ivec2 gpos = ivec2(gl_GlobalInvocationID.xy);  // Index of central pixel being denoised
     
    // Values associated with the central pixel
    // @@ Calculate/read each of these for the CENTRAL PIXEL at gpos
    vec3 cKd = max(vec3(imageLoad(kdBuff, gpos)), vec3(0.1));// read kdBuff at gpos, clamp value to vec3(0.1) or above
    vec3 cVal = imageLoad(inImage, gpos).xyz;// read .xyz of inImage at gpos;  the pixel value to be denoised
    vec3 cDem = cVal / cKd;  // The pixel value demodulated.

    vec4 nrmDepth = imageLoad(ndBuff, gpos); // Only load image once
    vec3 cNrm = nrmDepth.xyz;  // read ndBuff .xyz at gpos
    float cDepth = nrmDepth.w; // read ndBuff .w at gpos
    
    vec3 numerator = vec3(0.0);
    float denominator = 0.0;
    // For each (i,j) in a 5x5 block (-2<=i<=2, and -2<=j<=2) calculate an
    for (int i = -2; i <= 2; ++i)
    {
      for (int j = -2; j <= 2; ++j)
      {
        // offset from the CENTRAL PIXEL with pc.stepwidth sized holes
        ivec2 offset = ivec2(i,j) * pc.stepwidth; // Offset of 5x5 pixels **with holes**
        
        // Calculate/read a similar set of values as above,
        // but for the OFFSET PIXEL at location  gpos+offset
        // and named, perhaps, pKd, pVal, pDem, pNrm, pDepth. 
        ivec2 offsetP = gpos + offset;

        vec3 pKd = max(vec3(imageLoad(kdBuff, offsetP)), vec3(0.1));
        vec3 pVal = imageLoad(inImage, offsetP).xyz;
        vec3 pDem = pVal / pKd;

        vec4 nrmDepthP = imageLoad(ndBuff, offsetP); // Only load image once
        vec3 pNrm = nrmDepthP.xyz;  
        float pDepth = nrmDepthP.w; 

        // @@ Calculate the weight factor by comparing this loop's
        // OFFSET PIXEL to the CENTRAL PIXEL.  The weight is a product of 4 factors:
        //  1: h_weight = guassian[i+2] for a Gaussian distribution in the horizontal direction
        float hWeight = gaussian[i + 2];

        //  2: v_weight = guassian[j+2] for a Gaussian distribution in the vertical direction
        float vWeight = gaussian[j + 2];

        //  3: a depth related weight:
        //      d_weight = exp( -(t*t)/pc.depthFactor ); // or 1.0 if depthFactor is zero
        //      for t = cDepth-pDepth;
        float t = cDepth - pDepth;
        float dWeight = (pc.depthFactor == 0.0f) ? 1.0f : exp(-(t * t) / pc.depthFactor);

        //  4: a normal related weight
        //      n_weight = exp(-d/(pc.normFactor)); // or 1.0 if normFactor is zero
        //      for t = cNrm-pNrm
        //      and d = dot(t,t)/(pc.stepwidth*pc.stepwidth);
        vec3 v = cNrm - pNrm;
        float d = dot(v, v) / (pc.stepwidth * pc.stepwidth);
        float nWeight = (pc.normFactor == 0) ? 1.0f : exp(-d / pc.normFactor);

        // Then sum this pixel's contribution to both the numerator and denominator
        float weight = hWeight * vWeight * dWeight * nWeight; 

        numerator += pDem * weight;
        denominator += weight;
      }
    }
   
    // if (the denominator is zero, just use outVal = cVal;
    vec3 outVal = (denominator == 0) ? cVal : (cKd * numerator) / denominator; // Re-modulate the weighted average color

    imageStore(outImage, gpos, vec4(outVal,0));
}
