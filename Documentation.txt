GLFW required extensions:
VK_KHR_surface
VK_KHR_win32_surface

InstanceLayer count: 14
VK_LAYER_AMD_switchable_graphics
VK_LAYER_OBS_HOOK
VK_LAYER_VALVE_steam_overlay
VK_LAYER_VALVE_steam_fossilize
VK_LAYER_EOS_Overlay
VK_LAYER_EOS_Overlay
VK_LAYER_LUNARG_api_dump
VK_LAYER_LUNARG_gfxreconstruct
VK_LAYER_KHRONOS_synchronization2
VK_LAYER_KHRONOS_validation
VK_LAYER_LUNARG_monitor
VK_LAYER_LUNARG_screenshot
VK_LAYER_KHRONOS_profiles
VK_LAYER_KHRONOS_shader_object

InstanceExtensions count: 11
VK_KHR_device_group_creation
VK_KHR_external_fence_capabilities
VK_KHR_external_memory_capabilities
VK_KHR_external_semaphore_capabilities
VK_KHR_get_physical_device_properties2
VK_KHR_get_surface_capabilities2
VK_KHR_surface
VK_KHR_win32_surface
VK_EXT_debug_report
VK_EXT_debug_utils
VK_EXT_swapchain_colorspace

2 devices
GPU Rejected:
	AMD Radeon(TM) Graphics
GPU Accepted:
	AMD Radeon RX 6700S

QueueFamily count: 3
Queue Index: 0, VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT
Queue Index: 1, VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT
Queue Index: 2, VK_QUEUE_TRANSFER_BIT
Index 0 has the three required flags

Present Modes: 3
	VK_PRESENT_MODE_IMMEDIATE_KHR
	VK_PRESENT_MODE_FIFO_KHR
    	VK_PRESENT_MODE_FIFO_RELAXED_KHR

Surface Formats | Color Spaces (20 total pairs)
	VK_FORMAT_B8G8R8A8_UNORM           | VK_COLOR_SPACE_SRGB_NONLINEAR_KHR
	VK_FORMAT_B8G8R8A8_SRGB		   | VK_COLOR_SPACE_SRGB_NONLINEAR_KHR
 	VK_FORMAT_R4G4B4A4_UNORM_PACK16    | VK_COLOR_SPACE_SRGB_NONLINEAR_KHR
    	VK_FORMAT_B4G4R4A4_UNORM_PACK16	   | VK_COLOR_SPACE_SRGB_NONLINEAR_KHR
    	VK_FORMAT_R5G6B5_UNORM_PACK16	   | VK_COLOR_SPACE_SRGB_NONLINEAR_KHR
    	VK_FORMAT_B5G6R5_UNORM_PACK16	   | VK_COLOR_SPACE_SRGB_NONLINEAR_KHR
	VK_FORMAT_A1R5G5B5_UNORM_PACK16	   | VK_COLOR_SPACE_SRGB_NONLINEAR_KHR
	VK_FORMAT_R8G8B8A8_UNORM	   | VK_COLOR_SPACE_SRGB_NONLINEAR_KHR
   	VK_FORMAT_R8G8B8A8_SNORM	   | VK_COLOR_SPACE_SRGB_NONLINEAR_KHR
	VK_FORMAT_R8G8B8A8_SRGB		   | VK_COLOR_SPACE_SRGB_NONLINEAR_KHR
	VK_FORMAT_B8G8R8A8_SNORM	   | VK_COLOR_SPACE_SRGB_NONLINEAR_KHR
	VK_FORMAT_A8B8G8R8_UNORM_PACK32	   | VK_COLOR_SPACE_SRGB_NONLINEAR_KHR
    	VK_FORMAT_A8B8G8R8_SNORM_PACK32	   | VK_COLOR_SPACE_SRGB_NONLINEAR_KHR
	VK_FORMAT_A8B8G8R8_SRGB_PACK32	   | VK_COLOR_SPACE_SRGB_NONLINEAR_KHR
    	VK_FORMAT_A2R10G10B10_UNORM_PACK32 | VK_COLOR_SPACE_SRGB_NONLINEAR_KHR
	VK_FORMAT_A2B10G10R10_UNORM_PACK32 | VK_COLOR_SPACE_SRGB_NONLINEAR_KHR
	VK_FORMAT_R16G16B16A16_UNORM	   | VK_COLOR_SPACE_SRGB_NONLINEAR_KHR
    	VK_FORMAT_R16G16B16A16_SNORM	   | VK_COLOR_SPACE_SRGB_NONLINEAR_KHR
	VK_FORMAT_R16G16B16A16_SFLOAT	   | VK_COLOR_SPACE_SRGB_NONLINEAR_KHR
	VK_FORMAT_B10G11R11_UFLOAT_PACK32  | VK_COLOR_SPACE_SRGB_NONLINEAR_KHR

I chose the first format in my list which held VK_FORMAT_B8G8R8A8_UNORM as a format and VK_COLOR_SPACE_SRGB_NONLINEAR_KHR as its' color space.

Swapchain Image Count: 3

vkCreateGraphicsPipelines API_DUMP:

vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines) returns VkResult VK_SUCCESS (0):
    device:                         VkDevice = 00000239FE88EC50
    pipelineCache:                  VkPipelineCache = 0000000000000000
    createInfoCount:                uint32_t = 1
    pCreateInfos:                   const VkGraphicsPipelineCreateInfo* = 0000006E2FD0E540
        pCreateInfos[0]:                const VkGraphicsPipelineCreateInfo = 0000006E2FD0E540:
            sType:                          VkStructureType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO (28)
            pNext:                          const void* = NULL
            flags:                          VkPipelineCreateFlags = 0
            stageCount:                     uint32_t = 2
            pStages:                        const VkPipelineShaderStageCreateInfo* = 0000006E2FD0E1B0
                pStages[0]:                     const VkPipelineShaderStageCreateInfo = 0000006E2FD0E1B0:
                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO (18)
                    pNext:                          const void* = NULL
                    flags:                          VkPipelineShaderStageCreateFlags = 0
                    stage:                          VkShaderStageFlagBits = 1 (VK_SHADER_STAGE_VERTEX_BIT)
                    module:                         VkShaderModule = E7E6D0000000000F
                    pName:                          const char* = "main"
                    pSpecializationInfo:            const VkSpecializationInfo* = NULL
                pStages[1]:                     const VkPipelineShaderStageCreateInfo = 0000006E2FD0E1E0:
                    sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO (18)
                    pNext:                          const void* = NULL
                    flags:                          VkPipelineShaderStageCreateFlags = 0
                    stage:                          VkShaderStageFlagBits = 16 (VK_SHADER_STAGE_FRAGMENT_BIT)
                    module:                         VkShaderModule = D5B26F0000000010
                    pName:                          const char* = "main"
                    pSpecializationInfo:            const VkSpecializationInfo* = NULL
            pVertexInputState:              const VkPipelineVertexInputStateCreateInfo* = 0000006E2FD0E228:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO (19)
                pNext:                          const void* = NULL
                flags:                          VkPipelineVertexInputStateCreateFlags = 0
                vertexBindingDescriptionCount:  uint32_t = 0
                pVertexBindingDescriptions:     const VkVertexInputBindingDescription* = NULL
                vertexAttributeDescriptionCount: uint32_t = 0
                pVertexAttributeDescriptions:   const VkVertexInputAttributeDescription* = NULL
            pInputAssemblyState:            const VkPipelineInputAssemblyStateCreateInfo* = 0000006E2FD0E278:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO (20)
                pNext:                          const void* = NULL
                flags:                          VkPipelineInputAssemblyStateCreateFlags = 0
                topology:                       VkPrimitiveTopology = VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST (3)
                primitiveRestartEnable:         VkBool32 = 0
            pTessellationState:             const VkPipelineTessellationStateCreateInfo* = NULL
            pViewportState:                 const VkPipelineViewportStateCreateInfo* = 0000006E2FD0E318:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO (22)
                pNext:                          const void* = NULL
                flags:                          VkPipelineViewportStateCreateFlags = 0
                viewportCount:                  uint32_t = 1
                pViewports:                     const VkViewport* = 0000006E2FD0E2B8
                    pViewports[0]:                  const VkViewport = 0000006E2FD0E2B8:
                        x:                              float = 0
                        y:                              float = 0
                        width:                          float = 1280
                        height:                         float = 768
                        minDepth:                       float = 0
                        maxDepth:                       float = 1
                scissorCount:                   uint32_t = 1
                pScissors:                      const VkRect2D* = 0000006E2FD0E2E8
                    pScissors[0]:                   const VkRect2D = 0000006E2FD0E2E8:
                        offset:                         VkOffset2D = 0000006E2FD0E2E8:
                            x:                              int32_t = 0
                            y:                              int32_t = 0
                        extent:                         VkExtent2D = 0000006E2FD0E2F0:
                            width:                          uint32_t = 1280
                            height:                         uint32_t = 768
            pRasterizationState:            const VkPipelineRasterizationStateCreateInfo* = 0000006E2FD0E370:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO (23)
                pNext:                          const void* = NULL
                flags:                          VkPipelineRasterizationStateCreateFlags = 0
                depthClampEnable:               VkBool32 = 0
                rasterizerDiscardEnable:        VkBool32 = 0
                polygonMode:                    VkPolygonMode = VK_POLYGON_MODE_FILL (0)
                cullMode:                       VkCullModeFlags = 0 (VK_CULL_MODE_NONE)
                frontFace:                      VkFrontFace = VK_FRONT_FACE_COUNTER_CLOCKWISE (0)
                depthBiasEnable:                VkBool32 = 0
                depthBiasConstantFactor:        float = 0
                depthBiasClamp:                 float = 0
                depthBiasSlopeFactor:           float = 0
                lineWidth:                      float = 1
            pMultisampleState:              const VkPipelineMultisampleStateCreateInfo* = 0000006E2FD0E3C8:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO (24)
                pNext:                          const void* = NULL
                flags:                          VkPipelineMultisampleStateCreateFlags = 0
                rasterizationSamples:           VkSampleCountFlagBits = 1 (VK_SAMPLE_COUNT_1_BIT)
                sampleShadingEnable:            VkBool32 = 0
                minSampleShading:               float = 0
                pSampleMask:                    const VkSampleMask* = NULL
                alphaToCoverageEnable:          VkBool32 = 0
                alphaToOneEnable:               VkBool32 = 0
            pDepthStencilState:             const VkPipelineDepthStencilStateCreateInfo* = 0000006E2FD0E420:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO (25)
                pNext:                          const void* = NULL
                flags:                          VkPipelineDepthStencilStateCreateFlags = 0
                depthTestEnable:                VkBool32 = 1
                depthWriteEnable:               VkBool32 = 1
                depthCompareOp:                 VkCompareOp = VK_COMPARE_OP_LESS_OR_EQUAL (3)
                depthBoundsTestEnable:          VkBool32 = 0
                stencilTestEnable:              VkBool32 = 0
                front:                          VkStencilOpState = 0000006E2FD0E448:
                    failOp:                         VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    passOp:                         VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    depthFailOp:                    VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    compareOp:                      VkCompareOp = VK_COMPARE_OP_NEVER (0)
                    compareMask:                    uint32_t = 0
                    writeMask:                      uint32_t = 0
                    reference:                      uint32_t = 0
                back:                           VkStencilOpState = 0000006E2FD0E464:
                    failOp:                         VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    passOp:                         VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    depthFailOp:                    VkStencilOp = VK_STENCIL_OP_KEEP (0)
                    compareOp:                      VkCompareOp = VK_COMPARE_OP_NEVER (0)
                    compareMask:                    uint32_t = 0
                    writeMask:                      uint32_t = 0
                    reference:                      uint32_t = 0
                minDepthBounds:                 float = 0
                maxDepthBounds:                 float = 0
            pColorBlendState:               const VkPipelineColorBlendStateCreateInfo* = 0000006E2FD0E4E8:
                sType:                          VkStructureType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO (26)
                pNext:                          const void* = NULL
                flags:                          VkPipelineColorBlendStateCreateFlags = 0
                logicOpEnable:                  VkBool32 = 0
                logicOp:                        VkLogicOp = VK_LOGIC_OP_COPY (3)
                attachmentCount:                uint32_t = 1
                pAttachments:                   const VkPipelineColorBlendAttachmentState* = 0000006E2FD0E4A8
                    pAttachments[0]:                const VkPipelineColorBlendAttachmentState = 0000006E2FD0E4A8:
                        blendEnable:                    VkBool32 = 0
                        srcColorBlendFactor:            VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)
                        dstColorBlendFactor:            VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)
                        colorBlendOp:                   VkBlendOp = VK_BLEND_OP_ADD (0)
                        srcAlphaBlendFactor:            VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)
                        dstAlphaBlendFactor:            VkBlendFactor = VK_BLEND_FACTOR_ZERO (0)
                        alphaBlendOp:                   VkBlendOp = VK_BLEND_OP_ADD (0)
                        colorWriteMask:                 VkColorComponentFlags = 15 (VK_COLOR_COMPONENT_R_BIT | VK_COLOR_COMPONENT_G_BIT | VK_COLOR_COMPONENT_B_BIT | VK_COLOR_COMPONENT_A_BIT)
                blendConstants:                 float[4] = 0000006E2FD0E510
                    blendConstants[0]:              float = 0
                    blendConstants[1]:              float = 0
                    blendConstants[2]:              float = 0
                    blendConstants[3]:              float = 0
            pDynamicState:                  const VkPipelineDynamicStateCreateInfo* = NULL
            layout:                         VkPipelineLayout = 967DD1000000000E
            renderPass:                     VkRenderPass = CAD092000000000D
            subpass:                        uint32_t = 0
            basePipelineHandle:             VkPipeline = 0000000000000000
            basePipelineIndex:              int32_t = 0
    pAllocator:                     const VkAllocationCallbacks* = NULL
    pPipelines:                     VkPipeline* = 0000006E2FD0F108
        pPipelines[0]:                  VkPipeline = 980F360000000011